// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GettableHistoricUserConfig gettable historic user config
//
// swagger:model GettableHistoricUserConfig
type GettableHistoricUserConfig struct {

	// alertmanager config
	AlertmanagerConfig *GettableAPIAlertingConfig `json:"alertmanager_config,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last applied
	// Format: date-time
	LastApplied strfmt.DateTime `json:"last_applied,omitempty"`

	// template file provenances
	TemplateFileProvenances map[string]Provenance `json:"template_file_provenances,omitempty"`

	// template files
	TemplateFiles map[string]string `json:"template_files,omitempty"`
}

// Validate validates this gettable historic user config
func (m *GettableHistoricUserConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertmanagerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastApplied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateFileProvenances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GettableHistoricUserConfig) validateAlertmanagerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertmanagerConfig) { // not required
		return nil
	}

	if m.AlertmanagerConfig != nil {
		if err := m.AlertmanagerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertmanager_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertmanager_config")
			}
			return err
		}
	}

	return nil
}

func (m *GettableHistoricUserConfig) validateLastApplied(formats strfmt.Registry) error {
	if swag.IsZero(m.LastApplied) { // not required
		return nil
	}

	if err := validate.FormatOf("last_applied", "body", "date-time", m.LastApplied.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GettableHistoricUserConfig) validateTemplateFileProvenances(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateFileProvenances) { // not required
		return nil
	}

	for k := range m.TemplateFileProvenances {

		if val, ok := m.TemplateFileProvenances[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("template_file_provenances" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("template_file_provenances" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gettable historic user config based on the context it is used
func (m *GettableHistoricUserConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertmanagerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateFileProvenances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GettableHistoricUserConfig) contextValidateAlertmanagerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertmanagerConfig != nil {

		if swag.IsZero(m.AlertmanagerConfig) { // not required
			return nil
		}

		if err := m.AlertmanagerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertmanager_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertmanager_config")
			}
			return err
		}
	}

	return nil
}

func (m *GettableHistoricUserConfig) contextValidateTemplateFileProvenances(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.TemplateFileProvenances {

		if val, ok := m.TemplateFileProvenances[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GettableHistoricUserConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GettableHistoricUserConfig) UnmarshalBinary(b []byte) error {
	var res GettableHistoricUserConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
