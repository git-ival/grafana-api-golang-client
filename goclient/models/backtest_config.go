// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BacktestConfig backtest config
//
// swagger:model BacktestConfig
type BacktestConfig struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// condition
	Condition string `json:"condition,omitempty"`

	// data
	Data []*AlertQuery `json:"data"`

	// for
	For Duration `json:"for,omitempty"`

	// from
	// Format: date-time
	From strfmt.DateTime `json:"from,omitempty"`

	// interval
	Interval Duration `json:"interval,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// no data state
	// Enum: [Alerting NoData OK]
	NoDataState string `json:"no_data_state,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// to
	// Format: date-time
	To strfmt.DateTime `json:"to,omitempty"`
}

// Validate validates this backtest config
func (m *BacktestConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoDataState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BacktestConfig) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BacktestConfig) validateFor(formats strfmt.Registry) error {
	if swag.IsZero(m.For) { // not required
		return nil
	}

	if err := m.For.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("for")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("for")
		}
		return err
	}

	return nil
}

func (m *BacktestConfig) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BacktestConfig) validateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if err := m.Interval.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interval")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interval")
		}
		return err
	}

	return nil
}

var backtestConfigTypeNoDataStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alerting","NoData","OK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backtestConfigTypeNoDataStatePropEnum = append(backtestConfigTypeNoDataStatePropEnum, v)
	}
}

const (

	// BacktestConfigNoDataStateAlerting captures enum value "Alerting"
	BacktestConfigNoDataStateAlerting string = "Alerting"

	// BacktestConfigNoDataStateNoData captures enum value "NoData"
	BacktestConfigNoDataStateNoData string = "NoData"

	// BacktestConfigNoDataStateOK captures enum value "OK"
	BacktestConfigNoDataStateOK string = "OK"
)

// prop value enum
func (m *BacktestConfig) validateNoDataStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backtestConfigTypeNoDataStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BacktestConfig) validateNoDataState(formats strfmt.Registry) error {
	if swag.IsZero(m.NoDataState) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoDataStateEnum("no_data_state", "body", m.NoDataState); err != nil {
		return err
	}

	return nil
}

func (m *BacktestConfig) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backtest config based on the context it is used
func (m *BacktestConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BacktestConfig) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {

			if swag.IsZero(m.Data[i]) { // not required
				return nil
			}

			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BacktestConfig) contextValidateFor(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.For) { // not required
		return nil
	}

	if err := m.For.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("for")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("for")
		}
		return err
	}

	return nil
}

func (m *BacktestConfig) contextValidateInterval(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if err := m.Interval.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interval")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interval")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BacktestConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BacktestConfig) UnmarshalBinary(b []byte) error {
	var res BacktestConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
